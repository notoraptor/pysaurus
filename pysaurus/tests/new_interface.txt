File config.json
	database_folders=$HOME/.$PROGRAM_NAME
Notification groups:
	LOADING_DATABASE
	UPDATING_DATABASE
Functions:
	open_database(name)
		with notification group LOADING_DATABASE:
			# work and generate a database object ...
			notify DatabaseReady(database)
	create_database(name, values)
		with notification group LOADING_DATABASE:
			# work and generate a database object ...
			notify DatabaseReady(database)
	update_database(database, reset_thumbnail_errors)
		todo
component SelectionList values:list
	method getValue() -> selected value, or None
	Scrollable horizontal=false
		[Label]
			# one label per value
			# one label selected at time, selection on click, selected must have specific appearance
component ProgressBar value:unsigned int, total:unsigned int
component Confirm title:str, lines:List[str], action:callable
class VideoFolders values=[]
	method addValue(value)
	method getValues() => []
	Scrollable horizontal=false
		Column
			[Label]
				# One label per value
				ContextMenu
					"Delete" => TODO
	Row
		InputFolder newVideoFolder
		Button title="add" onclick={this.addValue(newVideoFolder.getValue())}
class NotificationInterface group:int, endif:callable, onend:callback endname:str
	var steps = {}
	Column
		Label statusTitle
		Label statusParagraph
		ProgressBar progressBar
		Button buttonEnd title={this.endname} disabled=true
		method manageNotification(notification):
			For each notification in {this.group}:
				if notification is an info:
					statusTitle = notification.title
					statusParagraph = notification.text
				else if notifications is a step:
					name = notification.name
					value = notification.step
					total = notification.total
					if name in steps:
						steps[name] += value
					else:
						steps[name] = value
					progressBar.value = steps[name]
					progressBar.total = total
					statusTitle = name
					statusParagraph = "%s / %s" % (steps[name], total)
				if this.endif(notification):
					buttonEnd.disabled = false
					buttonEnd.onclick = () => this.onend(notification)
		onload():
			add notification manager this.manageNotification
Panel home
	TabGroup
		Tab openDatabase
			SelectionList existingDatabases
			Button title="open" onclick={open_database(existingDatabases.getValue())}
		Tab createDatabase
			Label text="Database name:"
			Row
				InputText databaseName
					# text becomes red if a database already exists with this name
				Label warning color="red"
					# hidden by default
					# displayed with a message if a database already exists with this name
			VideoFolders videoFolders
			Button title="create" onclick={create_database(databaseName.getValue(), videoFolders.getValues())}
				# Disabled if database exists with same name
	NotificationInterface(
		group=LOADING_DATABASE
		endname="show"
		endif=lambda notification: {notification is a DatabaseReady}
		onend=lambda notification: {load panel database with notification.database}
	)
Panel database data:Database
	var view = None # either a list of videos or a list of video groups
	onload():
		database = this.data
		view = list[database.videos()]
	MenuBar
		Database
			Manage video folders ... -> Window
				VideoFolders videoFolders
				Row
					Button save onclick={save video folders}
					Button cancel
			Clean up ... -> Window
				Checkbox deleteNotFound title="delete entries not found"
				Checkbox deleteDiscarded title="delete discarded entries"
				Label "Help"
				Label:
					Discarded entries are entries corresponding to videos from folders that are no longer in list of
					video folders for this database. When a video folder is removed, corresponding entries are not
					automatically removed, as folder might be re-added in future. If you are sure you don't plan to
					add removed folders again in this database, or if removed folders don't exist anymore,
					then you should better delete discarded entries.
				Row
					Button cleanup -> Confirm(action={cleanup database and close window})
					Button cancel
			Refresh ... -> Window
				Panel confirmRefresh
					Checkbox resetThumbnailErrors title="ignore thumbnails errors"
					Row
						Button refresh onclick={launch panel refresh}
						Button cancel
				Panel refresh database:Database, resetThumbnailErrors: bool
					onload():
						update_database(database, resetThumbnailErrors.getValue())
					NotificationInterface(
						group=UPDATING_DATABASE
						endname="updated!"
						endif=lambda notification: {notification is a DatabaseReady}
						onend=lambda notification: {close window}
					)
			Close ... -> Confirm(action={close everything and go back to panel home})
		View
			Unreadable: checkbox, default = false
			Valid: checkbox, default = true
			Without thumbnails: checkbox, default = true
			With thumbnails: checkbox, default = true
			Statistics ... -> Window
				Labels:
					Number of entries
					Number of entries discarded
					Number of entries retained
					Number of videos not found
					Number of videos found
					Number of unreadable videos found
					Number of valid videos found
					Number of valid videos found without thumbnails
					Number of valid videos found with thumbnails
			Group videos by ... -> Window
				SelectionList videoProperties list=(["none"] + [video properties])
				Row
					Button group onclick={group videos by selected property and put groups in view}
					Button cancel
	Frame
		Bar statusBar
			Label: number of found valid videos
			(if number of valid videos != number of valid videos with thumbnails)
				Label: number of found valid videos with thumbnails
			Label: number of found unreadable videos
			Label: description of current view, either:
				Viewing all videos
				Viewing videos grouped by {video property}
				Viewing videos found for {search command}
				# or other specific views ...
			(if viewing videos and not viewing all videos)
				Label: number of videos in current view
				Label: number of videos in current page
			(if viewing video groups)
				Label: number of groups found
				Label: number of videos in groups found
		Bar displayOptions
			Form sortBar onChange={sort according to sortProperty.getValue() and reverse.getValue()}
				Row
					Label Sort by
					Dropdown sortProperty values={video properties}
					Checkbox reverse
			Form searchBar onChange={search according to searchInput.getValue() and sortType.getValue()}
				Row
					InputText searchInput placeholder="type text to search"
					RadioButtonGroup sortType
						Radio all
						Radio any
						Radio exact
		Frame viewFrame
		(if view is a list of videos)
		(if view is a list of video groups)