include "sciter:reactor.tis";

class SetController {
	function size() {}
	function get(index) {}
	function has(value) {}
	function add(value) {}
	function remove(value) {}
}

class SetInput: Reactor.Component {
	function this(props) {
		// controller: SetController
		this.props = props;
	}
	function attached() {
		stdout.println('attached');
	}
	function detached() {
		stdout.println('detached');
	}
	function render() {
		return (
			<div class="list-input">
				<table>
					{this.renderList()}
					<tr class="form">
						<td class="input"><input type="text" name="add" size="10"/></td>
						<td class="action"><button class="add">+</button></td>
					</tr>
				</table>
			</div>
		);
	}
	function renderList() {
		const output = [];
		const controller = this.props.controller;
		const size = controller.size();
		for (let i = 0; i < size; ++i) {
			const value = controller.get(i);
			output.push(
				<tr class="item" key={i}>
					<td class="label">{value}</td>
					<td class="action"><button class="remove" item={value}>-</button></td>
				</tr>
			);
		}
		return output;
	}
	event change $(.list-input input[name=add]) (evt, element) {
		stdout.println('we change input');
		this.update();
	}
	event click $(.list-input button.add) (evt, element) {
		const input = $(input[name=add]);
		this.add(input);
	}
	event click $(.list-input button.remove) (evt, element) {
		const value = element.attributes['item'];
		const controller = this.props.controller;
		if (!controller.has(value))
			return;
		controller.remove(value);
		this.update();
	}
	event keydown $(input[name=add]) (evt, element) {
		if (evt.keyCode === Event.VK_RETURN) {
			this.add(element);
		}
	}
	function add(input) {
		stdout.println('we click on add');
		const value = input.value;
		if (!value.length)
			return;
		stdout.println('Valid value to add');
		const controller = this.props.controller;
		if (controller.has(value))
			return view.msgbox(#alert, 'Value already in list: ' + value);
		controller.add(value);
		input.value = '';
		this.update();
	}
}