include "sciter:reactor.tis";

class SetController {
	function size() {}
	function get(index) {}
	function has(value) {}
	function add(value) {}
	function remove(value) {}
}

class ComponentController: SetController {
	function this(app, field) {
		this.app = app;
		this.field = field;
	}
	function size() {
		return this.app[this.field].length;
	}
	function get(index) {
		return this.app[this.field][index];
	}
	function has(value) {
		return this.app[this.field].indexOf(value) >= 0;
	}
	function add(value) {
		const arr = this.app[this.field].slice();
		arr.push(value);
		this.app.update({[this.field]: arr});
	}
	function remove(toRemove) {
		const arr = [];
		for (let value in this.app[this.field]) {
			if (value !== toRemove)
				arr.push(value);
		}
		this.app.update({[this.field]: arr});
	}
}

class SetInput: Reactor.Component {
	function this(props) {
		// controller: SetController
		this.props = props;
		stdout.println('construct set input');
	}
	function attached() {
		stdout.println('attached');
	}
	function detached() {
		stdout.println('detached');
	}
	function render() {
		stdout.println('render set input', this.props.identifier);
		return (
			<div class="set-input">
				<table>
					{this.renderList()}
					<tr class="form">
						<td class="input">
							<input type="text" name="add" size="10" id={this.props.identifier}/>
						</td>
						<td class="action"><button class="add">+</button></td>
					</tr>
				</table>
			</div>
		);
	}
	function renderList() {
		const output = [];
		const controller = this.props.controller;
		const size = controller.size();
		for (let i = 0; i < size; ++i) {
			const value = controller.get(i);
			output.push(
				<tr class="item" key={i}>
					<td class="label">{value}</td>
					<td class="action"><button class="remove" item={value}>-</button></td>
				</tr>
			);
		}
		return output;
	}
	event change $(.set-input input[name=add]) (evt, element) {
		this.update();
	}
	event click $(.set-input button.add) (evt, element) {
		const input = $(input[name=add]);
		this.add(input);
	}
	event click $(.set-input button.remove) (evt, element) {
		const value = element.attributes['item'];
		const controller = this.props.controller;
		if (!controller.has(value))
			return;
		controller.remove(value);
		this.update();
	}
	event keydown $(.set-input input[name=add]) (evt, element) {
		if (evt.keyCode === Event.VK_RETURN) {
			this.add(element);
		}
	}
	function add(input) {
		const value = input.value;
		if (!value.length)
			return;
		const controller = this.props.controller;
		if (controller.has(value))
			return view.msgbox(#alert, 'Value already in list: ' + value);
		controller.add(value);
		input.value = '';
		this.update();
	}
}