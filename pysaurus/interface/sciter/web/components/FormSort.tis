include "sciter:reactor.tis";

class FormSort: Reactor.Component {
	function this(props) {
		// sorting
		// onClose(sorting)
		this.props = props || {};
		this.countSorting = 0;
	}
	function render() {
		return (
			<form class="form" id="form-sort">
			    <div>Click on "+" to add a new sorting criterion.</div>
			    <div>Click on "-" to remove a sorting criterion.</div>
			    <div>Click on "sort" to validate, or close dialog to cancel.</div>
			    <p id="sorting"></p>
			    <div class="button-bar">
			        <button id="button-sort-add-criterion">+</button>
			        <button id="button-sort">sort</button>
			    </div>
			</form>
		);
	}

    function addSorting(value = 'title', reverse = false) {
        const index = ++this.countSorting;
		const reverseID = 'reverse-' + index;
		$(p#sorting).append(
			<p key={index} class="sorting">
				<button class="button-remove-sort">-</button>
				<select name={'field-' + index} :value={value}>
					{SORT_FIELDS.map((field, fieldIndex) => <option key={fieldIndex} value={field}>{FIELD_TITLES[field]}</option>)}
				</select>
				<input type="checkbox" id={reverseID} name={'reverse-' + index} :checked={reverse}/>
				<label for={reverseID}>reverse</label>
			</p>
		);
    }
    event change $(p#sorting select) (evt, element) {
        element.nextNode.state.checked = false;
    }
    event click $(button#button-sort-add-criterion) (evt, element) {
		this.addSorting();
	}
	event click $(button.button-remove-sort) (evt, element) {
		element.parent.remove();
	}
	event click $(button#button-sort) (evt, element) {
		const form = $(form#form-sort).value;

		const data = {};
		const indices = [];
		for (let key in Object.keys(form)) {
		    const pieces = key.toString().split('-');
		    const entry = pieces[0];
		    const index = pieces[1].toInteger();
		    if (!data[index]) {
		        data[index] = {};
		        indices.push(index);
		    }
		    data[index][entry] = form[key];
		}

		indices.sort();
		const fields = [];
		const sorting = [];
		for (let index in indices) {
			const info = data[index];
			const field = info.field;
			const reverse = info.reverse;
			if (fields.indexOf(field) === -1) {
				fields.push(field);
				sorting.push((reverse ? '-' : '+') + field);
			}
		}
		$(p#sorting).clear();
	    this.props.onClose(sorting);
	}
	function attached() {
	    const sorting = this.props.sorting;
	    if (sorting.length) {
	        for (let def in sorting) {
	            const direction = def.substr(0, 1);
	            const field = def.substr(1);
	            const reverse = (direction == '-');
	            this.addSorting(field, reverse);
	        }
	    } else {
            this.addSorting('date', true);
	    }
    }
}