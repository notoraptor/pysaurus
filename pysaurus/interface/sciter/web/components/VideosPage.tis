include "sciter:reactor.tis";
include "../utils/constants.tis";
include "Video.tis";

class VideosPage: Reactor.Component {
	const styleset = ['VideosPage', $url(VideosPage.css)];
	function this(props, children) {
		this.props = props || {};
		this.children = children || {};

		this.pageSize = 20;
		this.pageNumber = 0;
		this.searchText = null;
		this.searchType = null;
		this.sorting = [];
		this.status = 'loaded';
	}
	function render() {
		const nbVideos = view.count_videos();
		const nbPages = view.count_pages(this.pageSize);
		const validSize = view.valid_size();
		const validLength = view.valid_length();
		const videosAreFiltered = this.searchText || this.sorting.length;

		if (this.pageNumber >= nbPages - 1)
			this.pageNumber = nbPages - 1;
		if (this.pageNumber < 0)
			this.pageNumber = 0;

		return (
			<div id="videos">
				<div class="row central-panel">
					<div class="col side-panel">
						<div class="status">
							Displaying {videosAreFiltered ? <em>filtered</em> : <strong>all</strong>} videos
						</div>
						<div class="status">
							<div>{nbVideos} video{nbVideos > 1 ? 's' : ''}</div>
							<div>{validSize}</div>
							<div>{validLength}</div>
						</div>
						<hr/>

						{this.searchText ? (
							<div class="row">
								<div class="col status">
									<div>Searched</div>
									<div>&quot;<strong>{this.searchText}</strong>&quot;</div>
									<div>({SEARCH_TYPE_TITLE[this.searchType]})</div>
								</div>
								<div class="col status text-right" style="height: 1*; width: 1*; vertical-align: bottom;">
									<button id="reset-search">reset</button>
								</div>
							</div>
						) : ''}
						<form class="status" id="form-search">
							<div>
								<input type="text" id="input-search" name="searchText" accesskey="^F" novalue="Search ..."/>
							</div>
							<div>
								<input type="radio" id="input-search-and" name="searchType" value="and" :checked={this.searchType === "and"}/>
								<label for="input-search-and">all terms</label>
							</div>
							<div>
								<input type="radio" id="input-search-or" name="searchType" value="or" :checked={this.searchType === "or"}/>
								<label for="input-search-or">any term</label>
							</div>
							<div>
								<input type="radio" id="input-search-exact" name="searchType" value="exact" :checked={this.searchType === "exact"}/>
								<label for="input-search-exact">exact sentence</label>
							</div>
						</form>
						<hr/>

						{this.sorting.length ? (
							<div>
								<div class="status">
									<div>Videos sorted by</div>
									{this.sorting.map((val, i) => <div key={i}><strong>{val.substr(1)}</strong>{val[0] == '-' ? (<em> (reverse)</em>) : ''}</div>)}
								</div>
								<div class="status">
									<button class="sort">edit ...</button>
									<button id="reset-sort">reset</button>
								</div>
							</div>
						) : (
							<div class="status">
								<button class="sort">Sort ...</button>
							</div>
						)}
						<hr/>

						<div class="status">
							<select class="select-page-size" novalue="videos per page" :value={20}>
								{[10, 20, 50, 100].map((count, index) => <option key={index} value={count}>Display {count} video{count > 1 ? 's' : ''} per page</option>)}
							</select>
						</div>
						<hr/>

						<div class="status">
							<button id="open-random-file"><strong><em>open a random video</em></strong></button>
						</div>
					</div>
					<div class="col main-panel">
						{nbPages ? (
							<div class="status">
								<button id="first-page" :disabled={this.pageNumber === 0}>&lt;&lt;</button>
								<button id="previous-page" :disabled={this.pageNumber === 0}>&lt;</button>
								<span>Page <input type="integer" id="current-page" min={1} max={nbPages} step={1} :value={this.pageNumber + 1}/> / {nbPages}</span>
								<button id="next-page" :disabled={this.pageNumber === nbPages - 1}>&gt;</button>
								<button id="last-page" :disabled={this.pageNumber === nbPages - 1}>&gt;&gt;</button>
							</div>
						) : (<div class="status"><em>0 / 0 pages</em></div>)}
						<div class="videos">{this.getVideos()}</div>
					</div>
				</div>
				<div id="status">{this.status}</div>
			</div>
		);
	}

	function privateResetView() {
		const container = $(div.videos);
		container.scrollTo(0, 0);
		if (container.length)
			container[videoShift || 0].scrollToView(true);
	}

	function getVideos() {
		const bounds = view.get_videos_index_range(this.pageSize, this.pageNumber);
		const start = bounds[0];
		const end = bounds[1];
		const videos = [];
		const parent = this;
		for (let i = start; i < end; ++i) {
			const data = view.get_video_fields(i, FIELDS);
			videos.push(<Video key={data.video_id} data={data} index={i} parent={parent}/>);
		}
		return videos;
	}
	function updateView(state, videoShift = undefined) {
		this.update(state);
		this.post(this.privateResetView);
	}
	function updateStatus(status) {
		this.update({status: status});
	}

	event click $(button#open-random-file) (evt, element) {
		element.state.disabled = true;
		const info = view.open_random_video(this.pageSize);
		this.updateView({pageNumber: info[0]}, info[1]);
		this.post(() => element.state.disabled = false);
	}
	event click $(button#first-page) {
		if (this.pageNumber !== 0) {
			this.updateView({pageNumber: 0});
		}
	}
	event click $(button#previous-page) {
		if (this.pageNumber > 0) {
			this.updateView({pageNumber: this.pageNumber - 1});
		}
	}
	event click $(button#next-page) {
		const nbPages = view.count_pages(this.pageSize);
		if (this.pageNumber < nbPages - 1) {
			this.updateView({pageNumber: this.pageNumber + 1});
		}
	}
	event click $(button#last-page) {
		const nbPages = view.count_pages(this.pageSize);
		if (this.pageNumber !== nbPages - 1) {
			this.updateView({pageNumber: nbPages - 1});
		}
	}
	event change $(input#current-page) (evt, element) {
		const nbPages = view.count_pages(this.pageSize);
		let pageNumber = (element.value || 1) - 1;
		if (pageNumber >= nbPages)
			pageNumber = nbPages - 1;
		if (pageNumber < 0)
			pageNumber = 0;
		if (pageNumber !== this.pageNumber)
			this.updateView({pageNumber: pageNumber});
	}
	event change $(input#input-search) {
		this.update({searchType: null});
	}
	event change $(input[name=searchType]) {
		const form = $(form#form-search).value;
		const text = form.searchText.trim();
		const cond = form.searchType.trim();
		if (text.length && cond.length && this.searchType !== cond) {
			view.search_videos(text, cond);
			this.updateView({searchText: text, searchType: cond, pageNumber: 0});
		}
	}
	event keydown $(input#input-search) (evt, element) {
		if (evt.keyCode === Event.VK_RETURN) {
			const text = $(input#input-search).value.trim();
			const cond = 'and';
			if (text.length) {
				view.search_videos(text, cond);
				this.updateView({searchText: text, searchType: cond, pageNumber: 0});
			}
		}
	}
	event click $(button#reset-search) (evt, element) {
		view.load_videos();
		$(input#input-search).value = '';
		this.updateView({searchText: null, searchType: null, pageNumber: 0});
	}
	event click $(button#reset-sort) (evt, element) {
		view.set_sorting([]);
		this.updateView({sorting: [], pageNumber: 0});
	}
	event click $(#status) {
		this.updateStatus('');
	}
	event click $(button.sort) (evt, element) {
		const sorting = view.dialog('html/sort.html');
		if (sorting && sorting.length) {
			view.set_sorting(sorting);
			this.updateView({sorting: sorting, pageNumber: 0});
		}
    }
    event change $(select.select-page-size) (evt, element) {
        const value = element.value;
        if (value !== this.pageSize) {
            this.updateView({pageSize: value, pageNumber: 0});
        }
    }
}