include "sciter:reactor.tis";
include "../utils/constants.tis";
include "../utils/utils.tis";
include "Video.tis";
include "Pagination.tis";
include "FormGroup.tis";

class VideosPage: Reactor.Component {
	function this(props, children) {
		this.props = props || {};
		this.children = children || {};

		this.pageSize = 100;
		this.pageNumber = 0;
		this.searchText = null;
		this.searchType = null;
		this.sorting = [];
		this.status = 'Loaded.';
		this.group = null;
		this.groupField = null;
		this.groupReverse = null;
		this.groupNumber = 0;
		this.resetSearchCount = 0;
	}
	function render() {
		const backend = view.get_info(this.pageSize);
		const nbVideos = backend.nbVideos;
		const nbPages = backend.nbPages;
		const validSize = backend.validSize;
		const validLength = backend.validLength;
		const nbGroups = backend.nbGroups;
		const grouped = this.isGrouped();
		const videosAreFiltered = this.searchText || this.sorting.length || grouped;

		if (this.pageNumber >= nbPages - 1)
			this.pageNumber = nbPages - 1;
		if (this.pageNumber < 0)
			this.pageNumber = 0;

		if (grouped) {
			const oldGroupNumber = this.groupNumber;
			if (this.groupNumber >= nbGroups - 1)
				this.groupNumber = nbGroups - 1;
			if (this.groupNumber < 0)
				this.groupNumber = 0;
			if (oldGroupNumber !== this.groupNumber)
				view.set_group(this.groupNumber);
		}

		const app = this;
		const onChangePage = function(pageNumber) {
			app.updateView({pageNumber: pageNumber});
		};
		const onChangeGroup = function(groupNumber) {
			app.updateGroup(groupNumber);
		};

		return (
			<div id="videos">
				<div class="row central-panel">
					<div class="col side-panel">
						<div class="status">
							Displaying {videosAreFiltered ? <em>filtered</em> : <strong>all</strong>} videos
						</div>
						<div class="status">
							<div>{nbVideos} video{nbVideos > 1 ? 's' : ''}</div>
							<div>{validSize}</div>
							<div>{validLength}</div>
						</div>
						<hr/>

						{grouped ? (
							<div>
								<div class="status">
									<div>Videos grouped by</div>
									<div>{FIELD_TITLES[this.groupField]}</div>
									{this.groupReverse ? (<em>(in reverse order)</em>) : ''}
									<div>{nbGroups} group{nbGroups > 1 ? 's' : ''}</div>
									<div>Group {this.groupNumber + 1}</div>
								</div>
								<div class="buttons-sorted">
									<button class="group">edit ...</button>
									<button id="reset-group">reset</button>
								</div>
							</div>
						) : (
							<div class="status">
								<button class="group block">Group videos ...</button>
							</div>
						)}
						<hr/>

						{this.searchText ? (
							<div>
								<div class="status">
									<div>Searched</div>
									<div>&quot;<strong>{this.searchText}</strong>&quot;</div>
									<div>({SEARCH_TYPE_TITLE[this.searchType]})</div>
								</div>
								<div class="buttons-sorted">
									<button class="search">search ...</button>
									<button id="reset-search">reset</button>
								</div>
							</div>
						) : (
							<div class="status">
								<button class="search block">Search ...</button>
							</div>
						)}
						<hr/>

						{this.sorting.length ? (
							<div>
								<div class="status">
									<div>Videos sorted by</div>
									{this.sorting.map((val, i) => <div key={i}><strong>{val.substr(1)}</strong>{val[0] == '-' ? (<em> (reverse)</em>) : ''}</div>)}
								</div>
								<div class="buttons-sorted">
									<button class="sort">edit ...</button>
									<button id="reset-sort">reset</button>
								</div>
							</div>
						) : (
							<div class="status">
								<button class="sort block">Sort ...</button>
							</div>
						)}
						<hr/>

						<div class="status">
							<select class="select-page-size" novalue="videos per page" :value={this.pageSize}>
								{[10, 20, 50, 100].map((count, index) => <option key={index} value={count}>Display {count} video{count > 1 ? 's' : ''} per page</option>)}
							</select>
						</div>
						<hr/>

						<div class="status">
							<button id="open-random-file">open a random video</button>
						</div>
					</div>
					<div class="col main-panel">
						<div class="status pagination">
							{grouped ? (
								<Pagination singular="group" plural="groups" nbPages={nbGroups} pageNumber={this.groupNumber} onChange={onChangeGroup}/>
							) : ''}
							<Pagination singular="page" plural="pages" nbPages={nbPages} pageNumber={this.pageNumber} onChange={onChangePage}/>
						</div>
						{(grouped && nbGroups) ? (<div class="status">{sentence(FIELD_TITLES[this.groupField])}:  <strong>{view.get_group_field_value()}</strong></div>) : ''}
						<div class="videos">{this.getVideos()}</div>
					</div>
				</div>
				<div id="status">{this.status}</div>
			</div>
		);
	}

	function isGrouped() {
		//
		return this.group && this.groupField && this.groupReverse !== null;
	}
	function reloadVideos() {
		if (this.isGrouped())
			view.group_videos(this.groupField, this.groupReverse);
		else
			view.load_videos();
	}
	function resetView(videoShift) {
		const container = $(div.videos);
		container.scrollTo(0, 0);
		if (container.length)
			container[videoShift || 0].scrollToView(true);
	}
	function getVideos() {
		const bounds = view.get_videos_index_range(this.pageSize, this.pageNumber);
		const start = bounds[0];
		const end = bounds[1];
		const videos = [];
		const parent = this;
		for (let i = start; i < end; ++i) {
			const data = view.get_video_fields(i, FIELDS);
			videos.push(<Video key={data.video_id} data={data} index={i} parent={parent}/>);
		}
		return videos;
	}
	function updateView(state, videoShift = undefined) {
		this.update(state);
		this.post(() => this.resetView(videoShift));
	}
	function updateStatus(status) {
		//
		this.update({status: status});
	}
	function updateGroup(groupNumber) {
		view.set_group(groupNumber);
		this.updateView({groupNumber: groupNumber, pageNumber: 0, searchText: null, searchType: null});
	}
	function groupVideos(groupField, groupReverse) {
		view.group_videos(groupField, groupReverse);
		this.updateView({group: true, groupField: groupField, groupReverse: groupReverse, groupNumber: 0, pageNumber: 0, searchText: null, searchType: null});
	}
	function onSearch(text, cond) {
		if (text.length && cond.length) {
			view.set_search(text, cond);
			this.updateView({searchText: text, searchType: cond, pageNumber: 0});
		}
	}
	function resetSearch() {
		this.reloadVideos();
		this.updateView({resetSearchCount: this.resetSearchCount + 1, searchText: null, searchType: null, pageNumber: 0});
	}

	event click $(button#open-random-file) (evt, element) {
		element.state.disabled = true;
		const info = view.open_random_video(this.pageSize);
		this.updateView({pageNumber: info[0], status: 'Randomly opened: ' + info[2]}, info[1]);
		this.post(() => element.state.disabled = false);
	}
	event change $(input#group) (evt, element) {
		const group = element.value;
		if (group) {
			this.update({group: group});
		} else {
			let update = null;
			if (this.isGrouped()) {
				view.load_videos();
				update = {group: null, groupField: null, groupReverse: null, pageNumber: 0, searchText: null, searchType: null};
			} else {
				update = {group: null};
			}
			this.update(update);
		}
	}
	event click $(button#reset-search) (evt, element) {
		//
		this.resetSearch();
	}
	event click $(button#reset-sort) (evt, element) {
		view.set_sorting([]);
		this.updateView({sorting: [], pageNumber: 0});
	}
	event click $(button#reset-group) (evt, element) {
		view.load_videos();
		this.update({group: null, groupField: null, groupReverse: null, pageNumber: 0, searchText: null, searchType: null});
	}
	event click $(#status) {
		//
		this.updateStatus('');
	}
	event click $(button.sort) (evt, element) {
		const sorting = view.dialog('html/sort.html');
		if (sorting && sorting.length) {
			view.set_sorting(sorting);
			this.updateView({sorting: sorting, pageNumber: 0});
		}
    }
    event click $(button.search) (evt, element) {
        const criterion = view.dialog('html/search.html');
        if (criterion) {
            this.onSearch(criterion.text, criterion.cond);
        }
    }
    event click $(button.group) (evt, element) {
        const criterion = view.dialog('html/group.html');
        if (criterion) {
            this.groupVideos(criterion.field, criterion.reverse);
        }
    }
    event change $(select.select-page-size) (evt, element) {
        const value = element.value;
        if (value !== this.pageSize) {
            this.updateView({pageSize: value, pageNumber: 0});
        }
    }
}