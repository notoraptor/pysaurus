include "sciter:reactor.tis";
include "../utils/constants.tis";
include "../utils/utils.tis";
include "Video.tis";
include "Pagination.tis";
include "FormSourceVideo.tis";
include "FormSort.tis";
include "FormSearch.tis";
include "FormGroup.tis";
include "MenuPack.tis";
include "Cross.tis";

class VideosPage: Reactor.Component {
	function this(props) {
		this.props = props || {};

		// this.pageSize = PAGE_SIZES[PAGE_SIZES.length - 1];
		this.pageSize = PAGE_SIZES[0];
		this.pageNumber = 0;
		this.status = 'Loaded.';
		this.confirmDeletion = true;
	}
	function render() {
		const backend = view.get_info(this.pageSize);
		const nbVideos = backend.nbVideos;
		const nbPages = backend.nbPages;
		const validSize = backend.validSize;
		const validLength = backend.validLength;
		const nbGroups = backend.nbGroups;
		const notFound = backend.notFound;
		const sources = backend.sources;
		const group_def = backend.groupDef;
		const group_field_value = backend.groupFieldValue;
		const search_def = backend.searchDef;
		const sorting = backend.sorting;
		const sortingIsDefault = sorting.length === 1 && sorting[0] === '-date';
		const app = this;

		return (
			<div id="videos">
				<header>
					<button type="menu">Options ...
						<menu class="popup">
							<li class="select-videos" accesskey="^2">Select videos ...</li>
							<li class="open-random-video">Open random video</li>
							<li class="reload-database">Reload database ...</li>
							<li class="manage-properties">Manage properties</li>
						</menu>
					</button>
					<MenuPack title="Options">
						<MenuItem action={Utils.callback(this, this.selectVideos)}>Select videos ...</MenuItem>
						{notFound ? '' : <MenuItem action={Utils.callback(this, this.openRandomVideo)}>Open random video</MenuItem>}
						<MenuItem action={Utils.callback(this, this.reloadDatabase)} >Reload database ...</MenuItem>
						<MenuItem action={Utils.callback(this, this.manageProperties)} >Manage properties</MenuItem>
						<Menu title="Page size ...">
							{PAGE_SIZES.map((count, index) => (
								<MenuItemCheck key={index} checked={this.pageSize === count} action={checked => {if (checked) app.setPageSize(count);}} >
									{count} video{count > 1 ? 's' : ''} per page
								</MenuItemCheck>
							))}
						</Menu>
						<MenuItemCheck checked={this.confirmDeletion} action={Utils.callback(this, this.confirmDeletionForNotFound)}>
							confirm deletion for entries not found
						</MenuItemCheck>
					</MenuPack>
					<div class="buttons">
						<button class="group" accesskey="^G">Group videos ...</button>
						<button class="search" accesskey="^F">Search ...</button>
						<button class="sort" accesskey="^S">Sort ...</button>
					</div>
					<div class="pagination">
						{group_def ? (
							<Pagination singular="group" plural="groups" nbPages={group_def.nb_groups} pageNumber={group_def.group_id} onChange={Utils.callback(this, this.changeGroup)}/>
						) : ''}
						<Pagination singular="page" plural="pages" nbPages={nbPages} pageNumber={this.pageNumber} onChange={Utils.callback(this, this.changePage)}/>
					</div>
				</header>
				<div class="frontier"/>
				<div class="horizontal central-panel">
					<div class="side-panel">
						<table class="filter">
							<tr>
								<td class="left">{sources.map((source, index) => <div class="source" key={index}>{source.join(' ').replace('_', ' ')}</div>)}</td>
								<td class="right"><SettingIcon title="Select sources ..." action={Utils.callback(this, this.selectVideos)}/></td>
							</tr>
							<tr>
								<td class="left">
									{group_def ? (
									<div class="filter">
										<div>Grouped by</div>
										<div>{FIELD_TITLES[group_def.field]}{' '}{group_def.reverse ? (<span>&#9660;</span>) : (<span>&#9650;</span>)}</div>
										{group_def.nb_groups ? (
											<div>
												<div>Group {group_def.group_id + 1} / {group_def.nb_groups}</div>
												<div>{Utils.sentence(FIELD_TITLES[group_def.field])}:  <strong>{group_field_value}</strong></div>
											</div>
										) : ''}
									</div>
									) : <div class="no-filter">Ungrouped</div>}
								</td>
								<td class="right">
									<div><SettingIcon title={group_def ? 'Edit ...' : 'Group ...'} action={Utils.callback(this, this.groupVideos)}/></div>
									{group_def ? <div><Cross title="Reset group" action={Utils.callback(this, this.resetGroup)}/></div> : ''}
								</td>
							</tr>
							<tr>
								<td class="left">
									{search_def ? (
									<div class="filter">
										<div>Searched {SEARCH_TYPE_TITLE[search_def.cond]}</div>
										<div>&quot;<strong>{search_def.text}</strong>&quot;</div>
									</div>
									) : <div class="no-filter">No search</div>}
								</td>
								<td class="right">
									<div><SettingIcon title={search_def ? 'Edit ...' : 'Search ...'} action={Utils.callback(this, this.searchVideos)}/></div>
									{search_def ? <div><Cross title="reset search" action={Utils.callback(this, this.resetSearch)}/></div> : ''}
								</td>
							</tr>
							<tr>
								<td class="left">
									<div>Sorted by</div>
									{sorting.map((val, i) => <div key={i}><strong>{val.substr(1)}</strong>{' '}{val[0] == '-' ? (<span>&#9660;</span>) : (<span>&#9650;</span>)}</div>)}
								</td>
								<td class="right">
									<div><SettingIcon title="Sort ..." action={Utils.callback(this, this.sortVideos)}/></div>
									{sortingIsDefault ? '' : <Cross title="reset sorting" action={Utils.callback(this, this.resetSort)} />}
								</td>
							</tr>
						</table>
					</div>
					<div class="main-panel">
						<div class="videos">{this.renderVideos()}</div>
					</div>
				</div>
				<footer>
					<div id="status">{this.status}</div>
					<div class="information">
						<span class="info count">{nbVideos} video{nbVideos > 1 ? 's' : ''}</span>
						<span class="info size">{validSize}</span>
						<span class="info length">{validLength}</span>
					</div>
				</footer>
			</div>
		);
	}

	function resetView(videoShift) {
		const container = $(div.videos);
		container.scrollTo(0, 0);
		if (container.length)
			container[videoShift || 0].scrollToView(true);
	}
	function updateView(state, videoShift = undefined) {
		this.update(state);
		this.post(() => this.resetView(videoShift));
	}
	function renderVideos() {
		const bounds = view.get_videos_index_range(this.pageSize, this.pageNumber);
		const start = bounds[0];
		const end = bounds[1];
		const videos = [];
		const parent = this;
		for (let i = start; i < end; ++i) {
			const data = view.get_video_fields(i, FIELDS);
			videos.push(<Video key={data.video_id} data={data} index={i} parent={parent} confirmDeletion={this.confirmDeletion}/>);
		}
		return videos;
	}
	function updateStatus(status) {
		//
		this.update({status: status});
	}
	function updateGroup(groupNumber) {
		view.set_group(groupNumber);
		this.updateView({pageNumber: 0});
	}
	function selectVideos() {
		const app = this;
		const tree = view.get_source_tree();
		const sources = view.get_sources();
		this.props.app.loadDialog('Select Videos', onClose => (
			<FormSourceVideo tree={tree} sources={sources} onClose={sources => {
				onClose();
				if (sources && sources.length) {
					view.set_sources(sources);
					app.update({pageNumber: 0});
				}
			}} />
		));
	}
	function searchVideos() {
		const app = this;
        const search_def = view.get_search_def() || {text: null, cond: null};
        this.props.app.loadDialog('Search videos', onClose => (
            <FormSearch text={search_def.text} cond={search_def.cond} onClose={criterion => {
                onClose();
				if (criterion && criterion.text.length && criterion.cond.length) {
					view.set_search(criterion.text, criterion.cond);
					app.updateView({pageNumber: 0});
				}
            }} />
        ));
	}
	function sortVideos() {
		const app = this;
		const sorting = view.get_sorting();
		this.props.app.loadDialog('Sort videos', onClose => (
			<FormSort sorting={sorting} onClose={sorting => {
				onClose();
				if (sorting && sorting.length) {
					view.set_sorting(sorting);
					app.updateView({pageNumber: 0});
				}
			}}/>
		));
	}
	function groupVideos() {
		const app = this;
        const group_def = view.get_group_def() || {field: null, reverse: null};
        this.props.app.loadDialog('Group videos with same:', onClose => (
            <FormGroup field={group_def.field} reverse={group_def.reverse} onClose={criterion => {
                onClose();
		        if (criterion) {
		            view.group_videos(criterion.field, criterion.reverse);
					this.updateView({pageNumber: 0});
		        }
            }} />
        ));
	}
	function openRandomVideo() {
		const filename = view.open_random_video(this.pageSize);
		this.updateView({status: 'Randomly opened: ' + filename});
	}
	function reloadDatabase() {
		//
		this.props.app.loadPage('home', {update: true});
	}
	function manageProperties() {
		//
		this.props.app.loadPage('properties');
	}
	function confirmDeletionForNotFound(value) {
		//
        this.update({confirmDeletion: value});
	}
	function setPageSize(value) {
        if (value !== this.pageSize) {
            this.updateView({pageSize: value, pageNumber: 0});
        }
	}
	function changePage(pageNumber) {
		//
		this.updateView({pageNumber: pageNumber});
	}
	function changeGroup(groupNumber) {
		//
		this.updateGroup(groupNumber);
	}
	function resetSearch() {
		view.set_search(null, null);
		this.updateView({pageNumber: 0});
	}
	function resetSort() {
		view.set_sorting([]);
		this.updateView({pageNumber: 0});
	}
	function resetGroup() {
		view.group_videos(null, null);
		this.update({pageNumber: 0});
	}

	event click $(button#reset-search) (evt, element) {
		//
		this.resetSearch();
	}
	event click $(button#reset-sort) (evt, element) {
		//
		this.resetSort();
	}
	event click $(button#reset-group) (evt, element) {
		//
		this.resetGroup();
	}
	event click $(button.sort) (evt, element) {
		//
		this.sortVideos();
    }
    event click $(button.search) (evt, element) {
        //
        this.searchVideos();
    }
    event click $(button.group) (evt, element) {
        //
        this.groupVideos();
    }
    event click $(#status) {
		//
		this.updateStatus('Ready.');
	}
	event click $(menu li.select-videos) {
		this.selectVideos();
	}
}