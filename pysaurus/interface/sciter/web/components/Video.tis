include "sciter:reactor.tis";

class Video: Reactor.Component {
    function this(props, children) {
        this.props = props || {};
        this.children = children || {};
		/** props:
		parent
		index
		data
		confirmDeletion: bool
		**/
    }
    function render() {
        const index = this.props.index;
        const data = this.props.data;
        data.audio_bit_rate = Math.round(data.audio_bit_rate / 1000).toInteger();
        data.extension = data.extension.toUpperCase();
        data.frame_rate = Math.round(data.frame_rate).toInteger();
        const title = data.title;
        const file_title = data.file_title;
        const meta_title = (title == file_title ? null : title);
        const hasThumbnail = data.hasThumbnail;
        return (
            <div class={'video horizontal' + (index % 2 ? ' even' : ' odd') + (data.exists ? ' found' : ' not-found')}>
                <div class="image">
                    {hasThumbnail ? <img alt={data.title} src={data.thumbnail_path}/> : <div class="no-thumbnail">no thumbnail</div>}
                </div>
                <div class="info">
                    <div class="name">
                        <div><strong>{data.title}</strong></div>
                        {data.title === data.file_title ? '' : <div><em>{data.file_title}</em></div>}
                    </div>
                    <div class={'filename-line' + (data.exists ? '' : ' horizontal')}>
	                    {data.exists ? '' : <div class="prepend"><code>NOT FOUND</code></div>}
	                    <div class="filename"><code>{data.filename}</code></div>
                    </div>
                    <div class="format horizontal">
                        <div class="prepend"><code>{data.extension}</code></div>
                        <div><strong title={data.file_size}>{data.size}</strong> / {data.container_format} (<span title={data.video_codec_description}>{data.video_codec}</span>, <span title={data.audio_codec_description}>{data.audio_codec}</span>)</div>
                    </div>
                    <div><strong>{data.width}</strong> x <strong>{data.height}</strong> @ {data.frame_rate} fps | {data.sample_rate} Hz, {data.audio_bit_rate} Kb/s</div>
                    <div><strong>{data.length}</strong> | <code>{data.date}</code></div>
                    <div class="quality horizontal">
                        <div class="prepend"><code>Quality</code></div>
                        <div><strong><em>{String.printf("%.2f", data.quality)}</em></strong> %</div>
                    </div>
                </div>
                <menu.context id={'video_' + data.video_id + '_' + index}>
                    {data.exists ? <li class="open-file">Open file</li> : <caption class="not-found">(not found)</caption>}
                    {data.exists ? '' : <li class="delete-file">Delete entry</li>}
	                {data.exists ? <li class="open-folder">Open containing folder</li> : ''}
	                {meta_title ? <li class="copy-meta-title">Copy meta title</li> : ''}
	                {file_title ? <li class="copy-file-title">Copy file title</li> : ''}
	                {data.exists ? <li class="rename-file">Rename video</li> : ''}
	                {data.exists ? <li class="delete-file">Delete video</li> : ''}
	            </menu>
            </div>
        );
    }
    function openVideo() {
        if (view.open_video(this.props.index))
	        this.props.parent.updateStatus('Opened: ' + this.props.data.filename);
	    else
	        this.props.parent.updateStatus('Unable to open: ' + this.props.data.filename);
    }
    function confirmDeletion() {
        return view.dialog({
            url: 'html/delete.html',
            parameters: {filename: this.props.data.filename, thumbnail_path: this.props.data.thumbnail_path}}
        );
    }
    function deleteVideo() {
        let deletionConfirmed = false;
        if (this.props.data.exists)
            deletionConfirmed = this.confirmDeletion();
        else if (this.props.confirmDeletion)
            deletionConfirmed = this.confirmDeletion();
        else
            deletionConfirmed = true;
        if (deletionConfirmed) {
            if (view.delete_video(this.props.index))
                this.props.parent.updateStatus('Video deleted! ' + this.props.data.filename);
            else
                this.props.parent.updateStatus('Unable to delete video! ' + this.props.data.filename);
        }
    }

    event contextmenu $(.video) (evt, element) {
        const (mx, my) = view.cursorLocation();
        element.popup(element.$(menu), 7, mx, my);
    }
    event click $(.video.found .info .filename code) (evt, element) {
        //
        this.openVideo();
    }
    event click $(.video.not-found .filename-line .prepend) (evt, element) {
        //
        this.deleteVideo();
    }

    event click $(menu li.open-file) (evt, element) {
        //
        this.openVideo();
    }
    event click $(menu li.delete-file) (evt, element) {
        //
        this.deleteVideo();
    }
    event click $(menu li.open-folder) (evt, element) {
        const folder = view.open_containing_folder(this.props.index);
        if (folder)
            this.props.parent.updateStatus('Opened folder: ' + folder)
        else
            this.props.parent.updateStatus('Unable to open containing folder for: ' + this.props.data.filename)
    }
    event click $(menu li.copy-meta-title) (evt, element) {
        const text = this.props.data.title;
        view.clipboard(#put, text);
        this.props.parent.updateStatus('Copied to clipboard: ' + text);
    }
    event click $(menu li.copy-file-title) (evt, element) {
        const text = this.props.data.file_title;
        view.clipboard(#put, text);
        this.props.parent.updateStatus('Copied to clipboard: ' + text);
    }
    event click $(menu li.rename-file) (evt, element) {
        const newTitle = view.dialog({
            url: 'html/rename.html',
            parameters: {filename: this.props.data.filename, title: this.props.data.file_title}
        });
        if (newTitle) {
            const data = view.rename_video(this.props.index, newTitle);
            if (data.error) {
                view.msgbox(#alert, String.printf('<div>Unable to rename</div><div><code>%s</code><div>Error message:<div><div><code>%s</code></div>', this.props.data.filename, data.error), 'Cannot rename video');
            } else {
	            this.props.data.filename = data.filename;
	            this.props.data.file_title = data.file_title;
	            this.props.parent.updateStatus('Renamed: ' + this.props.data.filename);
            }
        }
    }
}
