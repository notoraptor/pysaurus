include "sciter:reactor.tis";

class Video: Reactor.Component {
	const styleset = ['Video', $url(Video.css)];
    function this(props, children) {
        this.props = props || {};
        this.children = children || {};

        this.elementVideo = null;
        this.elementMenu = null;
    }
    function render() {
        const index = this.props.index;
        const data = this.props.data;
        data.audio_bit_rate = Math.round(data.audio_bit_rate / 1000).toInteger();
        data.extension = data.extension.toUpperCase();
        data.frame_rate = Math.round(data.frame_rate).toInteger();
        const title = data.title;
        const file_title = data.file_title;
        const meta_title = (title == file_title ? null : title);
        return (
            <div class={'video' + (index % 2 ? ' even' : ' odd')} @{this.elementVideo}>
                <div class="image">
                    <img alt={data.title} src={data.thumbnail_path}/>
                </div>
                <div class="info">
                    <div class="name">
                        <div><strong>{data.title}</strong></div>
                        {data.title === data.file_title ? '' : <div><em>{data.file_title}</em></div>}
                    </div>
                    <div class="filename"><code>{data.filename}</code></div>
                    <div class="format">
                        <div class="extension"><code>{data.extension}</code></div>
                        <div><strong>{data.size}</strong> / {data.container_format} (<span title={data.video_codec_description}>{data.video_codec}</span>, <span title={data.audio_codec_description}>{data.audio_codec}</span>)</div>
                    </div>
                    <div><strong>{data.width}</strong> x <strong>{data.height}</strong> @ {data.frame_rate} fps | {data.sample_rate} Hz, {data.audio_bit_rate} Kb/s</div>
                    <div><strong>{data.length}</strong> | <code>{data.date}</code></div>
                </div>
                <menu.context @{this.elementMenu} id={'video_' + data.video_id + '_' + index}>
	                <li class="open-file">Open file</li>
	                <li class="open-folder">Open containing folder</li>
	                {meta_title ? <li class="copy-meta-title">Copy meta title</li> : ''}
	                {file_title ? <li class="copy-file-title">Copy file title</li> : ''}
	                <li class="delete-file">Delete video</li>
	            </menu>
            </div>
        );
    }
    function openVideo() {
        view.open_video(this.props.index);
        this.props.parent.updateStatus('Opened: ' + this.props.data.filename);
    }

    event click $(.video .info .filename code) (evt, element) {
        this.openVideo();
    }
    event contextmenu $(.video) (evt, element) {
        const (mx, my) = view.cursorLocation();
        element.popup(element.$(menu), 7, mx, my);
    }
    event click $(menu li.open-file) (evt, element) {
        this.openVideo();
    }
    event click $(menu li.open-folder) (evt, element) {
        const folder = view.open_containing_folder(this.props.index);
        if (folder)
            this.props.parent.updateStatus('Opened folder: ' + folder)
        else
            this.props.parent.updateStatus('Unable to open containing folder for: ' + this.props.data.filename)
    }
    event click $(menu li.copy-meta-title) (evt, element) {
        const text = this.props.data.title;
        view.clipboard(#put, text);
        this.props.parent.updateStatus('Copied to clipboard: ' + text);
    }
    event click $(menu li.copy-file-title) (evt, element) {
        const text = this.props.data.file_title;
        view.clipboard(#put, text);
        this.props.parent.updateStatus('Copied to clipboard: ' + text);
    }
    event click $(menu li.delete-file) (evt, element) {
        const content = String.$(
            <div class="dialog-delete" style="text-align: center">
                <h1>Are you sure you want to <strong style="color: red;">definitely</strong> delete this video?</h1>
                <div class="filename"><code>{this.props.data.filename}</code></div>
                <p><img alt={this.props.data.title} src={this.props.data.thumbnail_path}/></p>
            </div>
        );
        const pressedButton = view.msgbox(#warning, content, 'Delete ' + this.props.data.file_title, [#no, #yes]);
        if (pressedButton === #yes) {
            if (view.delete_video(this.props.index))
                this.props.parent.updateStatus('Video deleted! ' + this.props.data.filename);
            else
                this.props.parent.updateStatus('Unable to delete video! ' + this.props.data.filename);
        }
    }
}