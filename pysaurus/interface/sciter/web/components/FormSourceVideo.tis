include "sciter:reactor.tis";

function getSubTree(tree, entryName) {
    const steps = entryName.split('-');
    let subTree = tree;
    for (let step in steps)
        subTree = subTree[step];
    return subTree;
}

function collectPaths(tree, collection, prefix='') {
    if (tree) {
        if (prefix.length)
            collection.push(prefix);
        for (let name in Object.keys(tree)) {
            const entryName = prefix.length ? (prefix + '-' + name) : name;
            collectPaths(tree[name], collection, entryName);
        }
    } else {
        collection.push(prefix);
    }
}

class FormSourceVideo: Reactor.Component {
    function this(props, children) {
        // tree
        // sources
        // onClose(sources)
        this.props = props || {};
        this.children = children || {};
        this.paths = this.props.sources.map(path => path.join("-"));
    }
    function render() {
        const app = this;
        return (
            <div class="form-source-video">
                {generateTree(app, this.props.tree)}
                <p>Currently selected:{this.paths.length ? '' : ' None'}</p>
                {this.paths.length ? (
                    <ul>{this.paths.map((path, index) => <li key={index}><strong>{path.replace('-', '.')}</strong></li>)}</ul>
                ) : ''}
                <p class="submit"><button class="submit">select</button></p>
            </div>
        );
    }
    function generateTree(app, tree, prefix='') {
        return (
            <ul>
            {Object.keys(tree).map((name, index) => {
                const subTree = tree[name];
                const entryName = prefix.length ? (prefix + '-' + name) : name;
                const hasPath = app.hasPath(entryName);
                return (
                    <li key={index}>
                        {subTree ? (
                            <p>
                                <div>
                                    <strong>{name}</strong>
                                    {' '}
                                    <input type="radio" id={entryName + '0'} name={entryName} value={'select'} :checked={hasPath}/>{' '}<label for={entryName + '0'}>select</label>
                                    {' '}
                                    <input type="radio" id={entryName + '1'} name={entryName} value={'develop'} :checked={!hasPath}/>{' '}<label for={entryName + '1'}>develop</label>
                                </div>
                                {hasPath ? '' : app.generateTree(app, subTree, entryName)}
                            </p>
                        ) : (
                            <p>
                                <label for={entryName + '0'}><strong>{name}</strong></label>{' '}
                                <input type="checkbox" id={entryName + '0'} name={entryName} :checked={hasPath}/>
                            </p>
                        )}
                    </li>
                );
            })}
            </ul>
        );
    }
    function addPaths(paths) {
        const newPaths = this.paths.slice();
        for (let path in paths) {
            if (newPaths.indexOf(path) < 0) {
                newPaths.push(path);
            }
        }
        newPaths.sort();
        this.update({paths: newPaths});
    }
    function removePaths(paths) {
        let newPaths = this.paths.slice();
        for (let path in paths) {
            const pos = newPaths.indexOf(path);
            if (pos >= 0) {
                newPaths.splice(pos, 1);
            }
        }
        this.update({paths: newPaths});
    }
    function hasPath(path) {
        return this.paths.indexOf(path) >= 0;
    }
    event change $(input[type=radio]) (evt, element) {
        const name = element.attributes['name'];
        const value = element.value;
        if (value === 'select') {
            const pathsToRemove = [];
            collectPaths(getSubTree(this.props.tree, name), pathsToRemove, name);
            this.removePaths(pathsToRemove);
            this.addPaths([name]);
        } else if (value === 'develop') {
            this.removePaths([name]);
        }
    }
    event change $(input[type=checkbox]) (evt, element) {
        const name = element.attributes['name'];
        if (element.value) {
            this.addPaths([name]);
        } else {
            this.removePaths([name]);
        }
    }
    event click $(button.submit) (evt, element) {
        this.props.onClose(this.paths.map(path => path.split('-')));
    }
}
