include "sciter:reactor.tis";
include "../utils/Notifications.tis";
include "../utils/constants.tis";

class ProgressionMonitoring {
	function this() {
		this.total = 0;
		this.jobs = {};
	}
	function clone(total = undefined, jobs = undefined) {
		const copy = new ProgressionMonitoring();
		copy.total = total ? total : this.total;
		copy.jobs = jobs ? jobs : this.jobs;
		return copy;
	}
	function collectJobNotification(notification) {
		this.jobs[notification.notification.index] = notification.notification.parsed;
		return this.clone();
	}
}

function collectNotification(app, notification, updates, store = true) {
	if (store) {
		const messages = app.messages.slice();
		messages.push(notification);
		updates.messages = messages;
	}
	app.update(updates);
}

function generateMonitoringMessage(monitoring, name) {
	const total = monitoring.total;
	let current = 0;
	for (let jobId in Object.keys(monitoring.jobs)) {
		current += monitoring.jobs[jobId];
	}
	const percent = Math.round(current * 100 / total).toInteger();
	const s0 = name + "-job";
	const s1 = "job " + s0;
	return (
		<div key={i} class={s1}>
			<label for={s0} class="info">{current} / {total} ({percent} %)</label>
			<progress id={s0} value={current} max={total}/>
		</div>
	);
}

const NotificationCollector = {
	DatabaseReady: function(app, notification) {
		collectNotification(
			app, notification,
			{status: HomeStatus.LOADED});
	},
	VideosToLoad: function(app, notification) {
		collectNotification(
			app, notification,
			{videosMonitoring: app.videosMonitoring.clone(notification.notification.total)});
	},
	ThumbnailsToLoad: function(app, notification) {
		collectNotification(
			app, notification,
			{thumbnailsMonitoring: app.thumbnailsMonitoring.clone(notification.notification.total)});
	},
	MiniaturesToLoad: function(app, notification) {
		collectNotification(
			app, notification,
			{miniaturesMonitoring: app.miniaturesMonitoring.clone(notification.notification.total)});
	},
	VideoJob: function(app, notification) {
		collectNotification(
			app, notification,
			{videosMonitoring: app.videosMonitoring.collectJobNotification(notification)},
			!app.messages.length || app.messages[app.messages.length - 1].name !== notification.name);
	},
	ThumbnailJob: function(app, notification) {
		collectNotification(
			app, notification,
			{thumbnailsMonitoring: app.thumbnailsMonitoring.collectJobNotification(notification)},
			!app.messages.length || app.messages[app.messages.length - 1].name !== notification.name);
	},
	MiniatureJob: function(app, notification) {
		collectNotification(
			app, notification,
			{miniaturesMonitoring: app.miniaturesMonitoring.collectJobNotification(notification)},
			!app.messages.length || app.messages[app.messages.length - 1].name !== notification.name);
	},
	// notifications ignored.
	ProfilingStart: function(app, notification) {}
};

const NotificationMessenger = {
	VideoJob: function(app, message, i) {
		return generateMonitoringMessage(app.videosMonitoring, 'video');
	},
	ThumbnailJob: function(app, message, i) {
		return generateMonitoringMessage(app.thumbnailsMonitoring, 'thumb');
	},
	MiniatureJob: function(app, message, i) {
		return generateMonitoringMessage(app.miniaturesMonitoring, 'miniature');
	},
	DatabaseLoaded: function(app, message, i) {
		const data = message.notification;
		return (
			<div key={i}>
				<strong>Database {message.name === 'DatabaseSaved' ? 'saved' : 'loaded'}</strong>:
				{data.entries}{' '}{data.entries > 1 ? 'entries': 'entry'},
				{data.discarded} discarded,
				{data.not_found} not found,
				{data.found} found,
				{data.unreadable} unreadable,
				{data.valid} valid,
				{data.thumbnails} with thumbnails
			</div>
		);
	},
	DatabaseSaved: function(app, message, i) {
		return NotificationMessenger.DatabaseLoaded(app, message, i);
	},
	DatabaseReady: function(app, message, i) {
		return <div key={i}><strong>Database open!</strong></div>;
	},
	FinishedCollectingVideos: function(app, message, i) {
		const count = message.notification.count;
		return (<div key={i}><strong>Collected</strong>{' '}{count} file{count > 1 ? 's' : ''}</div>);
	},
	MissingThumbnails: function(app, message, i) {
		const names = message.notification.names;
		if (names.length) {
			return (
				<div key={i}>
					<div><strong>Missing {names.length} thumbnails</strong>:</div>
					{names.map((name, indexName) => <div key={indexName}><code>{name}</code></div>)}
				</div>
			);
		} else {
			return (<div key={i}><em>No missing thumbnails!</em></div>);
		}
	},
	ProfilingEnd: function(app, message, i) {
		if (i > 0 && ['VideoJob', 'ThumbnailJob', 'MiniatureJob'].indexOf(app.messages[i - 1].name) !== -1)
			return (<div key={i}><strong>Loaded</strong> in {message.notification.time}</div>);
	},
	VideoInfoErrors: function(app, message, i) {
		const errors = message.notification.video_errors;
		const keys = Object.keys(errors);
		keys.sort();
		return (
			<div key={i}>
				<div><strong>
					{errors.length}{' '}{message.name === 'VideoInfoErrors' ? 'video' : 'thumbnail'}
					error{errors.length > 1 ? 's' : ''}
				</strong>:</div>
				<ul>{keys.map((name, indexName) => (
					<li key={indexName}>
						<div><code>{name}</code></div>
						<ul>{errors[name].map((error, indexError) => <li key={indexError}><code>{error}</code></li>)}</ul>
					</li>
				))}</ul>
			</div>
		);
	},
	VideoThumbnailErrors: function(app, message, i) {
		return NotificationMessenger.VideoInfoErrors(app, message, i);
	},
	VideosToLoad: function(app, message, i) {
		const labels = {VideosToLoad: 'video', ThumbnailsToLoad: 'thumbnail', MiniaturesToLoad: 'miniature'}
		const total = message.notification.total;
		const label = labels[message.name];
		if (total) {
			return (<div key={i}><strong>{total}{' '}{label}{total > 1 ? 's' : ''} to load.</strong></div>);
		} else {
			return (<div key={i}><em>No {label}s to load!</em></div>);
		}
	},
	ThumbnailsToLoad: function(app, message, i) {
		return NotificationMessenger.VideosToLoad(app, message, i);
	},
	MiniaturesToLoad: function(app, message, i) {
		return NotificationMessenger.VideosToLoad(app, message, i);
	},
	NbMiniatures: function(app, message, i) {
		const total = message.notification.total;
		if (total) {
			return (<div key={i}><strong>{total} miniature{total > 1 ? 's' : ''} saved.</strong></div>);
		} else {
			return (<div key={i}><em>No miniatures saved!</em></div>);
		}
	},
};

class HomePage: Reactor.Component {
	function this(props, children) {
		this.props = props || {};
		this.children = children || {};

		this.status = HomeStatus.INITIAL;
		this.messages = [];
		this.videosMonitoring = new ProgressionMonitoring();
		this.thumbnailsMonitoring = new ProgressionMonitoring();
		this.miniaturesMonitoring = new ProgressionMonitoring();

		this.callbackIndex = -1;
	}
	function render() {
		return (
			<div id="home">
				<div id="button-initial">{this.getInitialButton()}</div>
				<div class="notifications">{this.getMessages()}</div>
			</div>
		);
	}
	function attached() {
		const app = this;
		this.callbackIndex = Notifications.register(function(notification) {
			app.notify(notification);
		});
	}
	function detached() {
		//
		Notifications.unregister(this.callbackIndex);
	}
	function getInitialButton() {
		if (this.status === HomeStatus.INITIAL)
			return <button :disabled={false}>Load database</button>;
		if (this.status === HomeStatus.LOADING)
			return <button :disabled={true}>Loading database ...</button>;
		if (this.status === HomeStatus.LOADED)
			return <button :disabled={false}>Display videos</button>;
	}
	function getMessages() {
		const output = [];
		for (let i = 0; i < this.messages.length; ++i) {
			const message = this.messages[i];
			const name = message.name;
			let display = null;
			if (NotificationMessenger[name]) {
				display = NotificationMessenger[name](this, message, i);
				if (display)
					output.push(display);
			} else {
				output.push(<div key={i}><em>unknown</em>: {message.message}</div>);
			}
		}
		return output;
	}
	function notify(notification) {
		const name = notification.name;
		if (NotificationCollector[name])
			return NotificationCollector[name](this, notification);
		else
			collectNotification(this, notification, {});
	}
	event click $(#button-initial > button) (evt, element) {
		if (this.status === HomeStatus.INITIAL) {
			view.load_database();
			this.update({status: HomeStatus.LOADING});
		} else if (this.status === HomeStatus.LOADED) {
			this.props.app.loadPage("videos");
		}
	}
	event contentchange $(div.notifications) (evt, element) {
		element[element.length - 1].scrollToView(false);
	}
}