include "sciter:reactor.tis";
include "../utils/Notifications.tis";

const Status = {
	INITIAL: 0,
	LOADING: 1,
	LOADED: 2
}

class HomePage: Reactor.Component {
    function this(props, children) {
        this.props = props || {};
		this.children = children || {};

		this.status = Status.INITIAL;
		this.messages = [];
		this.nbVideosToLoad = 0;
		this.nbThumbnailsToLoad = 0;
		this.latestVideoJobs = {};
		this.latestThumbnailJobs = {};

		this.callbackIndex = -1;
    }
    function render() {
		return (
			<div id="home">
				<div id="button-initial">{this.getInitialButton()}</div>
				<div class="notifications">{this.getMessages()}</div>
			</div>
		);
	}
	function attached() {
		const app = this;
		this.callbackIndex = Notifications.register(function(notification) {
			app.notify(notification);
		});
	}
	function detached() {
		Notifications.unregister(this.callbackIndex);
	}
	function getInitialButton() {
		if (this.status === Status.INITIAL)
			return <button :disabled={false}>Load database</button>;
		if (this.status === Status.LOADING)
			return <button :disabled={true}>Loading database ...</button>;
		if (this.status === Status.LOADED)
			return <button :disabled={false}>Display videos</button>;
	}
	function getMessages() {
	    const output = [];
	    for (let i = 0; i < this.messages.length; ++i) {
	        const message = this.messages[i];
	        if (message === 'VideoJob') {
	            const total = this.nbVideosToLoad;
	            let current = 0;
	            for (let jobId in Object.keys(this.latestVideoJobs)) {
	                current += this.latestVideoJobs[jobId];
	            }
	            const percent = Math.round(current * 100 / total).toInteger();
	            output.push((
	                <div key={i} class="job video-job">
	                    <label for="video-job" class="info">{current} / {total} ({percent} %)</label>
	                    <progress id="video-job" value={current} max={total}/>
	                </div>
	            ));
	        } else if (message === 'ThumbnailJob') {
	            const total = this.nbThumbnailsToLoad;
	            let current = 0;
	            for (let jobId in Object.keys(this.latestThumbnailJobs)) {
	                current += this.latestThumbnailJobs[jobId];
	            }
	            const percent = Math.round(current * 100 / total).toInteger();
	            output.push((
	                <div key={i} class="job thumb-job">
	                    <label for="thumb-job" class="info">{current} / {total} ({percent} %)</label>
	                    <progress id="thumb-job" value={current} max={total}/>
	                </div>
	            ));
	        } else {
	            output.push(<div key={i}>{message.message}</div>);
	        }
	    }
		return output;
	}
	function notify(notification) {
	    const update = {};
	    let placeholder = notification;
	    if (notification.name === 'DatabaseReady')
            update.status = Status.LOADED;
        else if (notification.name === 'VideosToLoad')
            update.nbVideosToLoad = notification.notification.total;
        else if (notification.name === 'ThumbnailsToLoad')
            update.nbThumbnailsToLoad = notification.notification.total;
        else if (notification.name === 'VideoJob') {
            placeholder = notification.name;
            const latestVideoJobs = this.latestVideoJobs.clone();
            latestVideoJobs[notification.notification.index] = notification.notification.parsed;
            update.latestVideoJobs = latestVideoJobs;
        }
        else if (notification.name === 'ThumbnailJob') {
            placeholder = notification.name;
            const latestThumbnailJobs = this.latestThumbnailJobs.clone();
            latestThumbnailJobs[notification.notification.index] = notification.notification.parsed;
            update.latestThumbnailJobs = latestThumbnailJobs;
        }
        if (placeholder && (!this.messages.length || this.messages[this.messages.length - 1] !== placeholder)) {
            const messages = this.messages.slice();
            messages.push(placeholder);
            update.messages = messages;
        }
        this.update(update);
    }
    event click $(#button-initial > button) (evt, element) {
		if (this.status === Status.INITIAL) {
			view.load_database();
			this.update({status: Status.LOADING});
			return;
		}
		if (this.status === Status.LOADED) {
		    this.props.pageLoader("videos");
		    return;
		}
	}
	event contentchange $(div.notifications) (evt, element) {
	    element[element.length - 1].scrollToView(false);
	}
}