class Callbacks {
	function this() {
		this.id = 1;
		this.mapping = {};
		this.order = [];
	}
	function register(callback) {
		const id = this.id;
		this.mapping[id] = callback;
		this.order.push(id);
		++this.id;
		return id;
	}
	function unregister(id) {
		if (this.mapping[id])
			this.mapping[id] = undefined;
		const order = [];
		for (let value in this.order) {
			if (value !== id)
				order.push(value);
		}
		this.order = order;
	}
	function getCallbacks() {
		return this.order.map(id => this.mapping[id]);
	}
}

class KeyboardManager: Callbacks {
	function manage(keyCode) {
		for (let callback in this.getCallbacks()) {
			const toStop = callback(keyCode);
			if (toStop)
				break;
		}
	}
}

const KEYBOARD_MANAGER = new KeyboardManager();

event ready {
    const (sx, sy, sw, sh) = view.screenBox(#workarea, #rectw);
    const width = 1200;
    const height = 720;
    const x = (sw - width) / 2;
    const y = (sh - height) / 2;
    view.move(x, y, width, height);
}
event closerequest {
	//
    view.close_app();
}
event keydown (evt, element) {
	//
	KEYBOARD_MANAGER.manage(evt.keyCode);
}
